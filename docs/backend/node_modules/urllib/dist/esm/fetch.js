import { AsyncLocalStorage } from 'node:async_hooks';
import { debuglog } from 'node:util';
import { fetch as UndiciFetch, Request, getGlobalDispatcher, } from 'undici';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import undiciSymbols from 'undici/lib/core/symbols.js';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { getResponseState } from 'undici/lib/web/fetch/response.js';
import { channels, } from './HttpClient.js';
import { HttpAgent, } from './HttpAgent.js';
import { initDiagnosticsChannel } from './diagnosticsChannel.js';
import { convertHeader, globalId, performanceTime, updateSocketInfo } from './utils.js';
import symbols from './symbols.js';
import { BaseAgent } from './BaseAgent.js';
const debug = debuglog('urllib/fetch');
export class FetchFactory {
    #dispatcher;
    #opaqueLocalStorage = new AsyncLocalStorage();
    static #instance = new FetchFactory();
    setClientOptions(clientOptions) {
        let dispatcherOption = {
            opaqueLocalStorage: this.#opaqueLocalStorage,
        };
        let dispatcherClazz = BaseAgent;
        if (clientOptions?.lookup || clientOptions?.checkAddress) {
            dispatcherOption = {
                ...dispatcherOption,
                lookup: clientOptions.lookup,
                checkAddress: clientOptions.checkAddress,
                connect: clientOptions.connect,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = HttpAgent;
        }
        else if (clientOptions?.connect) {
            dispatcherOption = {
                ...dispatcherOption,
                connect: clientOptions.connect,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = BaseAgent;
        }
        else if (clientOptions?.allowH2) {
            // Support HTTP2
            dispatcherOption = {
                ...dispatcherOption,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = BaseAgent;
        }
        this.#dispatcher = new dispatcherClazz(dispatcherOption);
        initDiagnosticsChannel();
    }
    getDispatcher() {
        return this.#dispatcher ?? getGlobalDispatcher();
    }
    setDispatcher(dispatcher) {
        this.#dispatcher = dispatcher;
    }
    getDispatcherPoolStats() {
        const agent = this.getDispatcher();
        // origin => Pool Instance
        const clients = Reflect.get(agent, undiciSymbols.kClients);
        const poolStatsMap = {};
        if (!clients) {
            return poolStatsMap;
        }
        for (const [key, ref] of clients) {
            const pool = (typeof ref.deref === 'function' ? ref.deref() : ref);
            // NOTE: pool become to { dispatcher: Pool } in undici@v7
            const stats = pool?.stats ?? pool?.dispatcher?.stats;
            if (!stats)
                continue;
            poolStatsMap[key] = {
                connected: stats.connected,
                free: stats.free,
                pending: stats.pending,
                queued: stats.queued,
                running: stats.running,
                size: stats.size,
            };
        }
        return poolStatsMap;
    }
    static setClientOptions(clientOptions) {
        FetchFactory.#instance.setClientOptions(clientOptions);
    }
    static getDispatcherPoolStats() {
        return FetchFactory.#instance.getDispatcherPoolStats();
    }
    async fetch(input, init) {
        const requestStartTime = performance.now();
        init = init ?? {};
        init.dispatcher = init.dispatcher ?? this.#dispatcher;
        const request = new Request(input, init);
        const requestId = globalId('HttpClientRequest');
        // https://developer.chrome.com/docs/devtools/network/reference/?utm_source=devtools#timing-explanation
        const timing = {
            // socket assigned
            queuing: 0,
            // dns lookup time
            dnslookup: 0,
            // socket connected
            connected: 0,
            // request headers sent
            requestHeadersSent: 0,
            // request sent, including headers and body
            requestSent: 0,
            // Time to first byte (TTFB), the response headers have been received
            waiting: 0,
            // the response body and trailers have been received
            contentDownload: 0,
        };
        // using opaque to diagnostics channel, binding request and socket
        const internalOpaque = {
            [symbols.kRequestId]: requestId,
            [symbols.kRequestStartTime]: requestStartTime,
            [symbols.kEnableRequestTiming]: !!(init.timing ?? true),
            [symbols.kRequestTiming]: timing,
            // [symbols.kRequestOriginalOpaque]: originalOpaque,
        };
        const reqMeta = {
            requestId,
            url: request.url,
            args: {
                method: request.method,
                type: request.method,
                data: request.body,
                headers: convertHeader(request.headers),
            },
            retries: 0,
        };
        const fetchMeta = {
            requestId,
            request,
        };
        const socketInfo = {
            id: 0,
            localAddress: '',
            localPort: 0,
            remoteAddress: '',
            remotePort: 0,
            remoteFamily: '',
            bytesWritten: 0,
            bytesRead: 0,
            handledRequests: 0,
            handledResponses: 0,
        };
        channels.request.publish({
            request: reqMeta,
            isSentByFetch: true,
            fetchOpaque: internalOpaque,
        });
        channels.fetchRequest.publish({
            fetch: fetchMeta,
            fetchOpaque: internalOpaque,
        });
        let res;
        // keep urllib createCallbackResponse style
        const resHeaders = {};
        const urllibResponse = {
            status: -1,
            statusCode: -1,
            statusText: '',
            statusMessage: '',
            headers: resHeaders,
            size: 0,
            aborted: false,
            rt: 0,
            keepAliveSocket: true,
            requestUrls: [
                request.url,
            ],
            timing,
            socket: socketInfo,
            retries: 0,
            socketErrorRetries: 0,
        };
        try {
            await this.#opaqueLocalStorage.run(internalOpaque, async () => {
                res = await UndiciFetch(request);
            });
        }
        catch (e) {
            updateSocketInfo(socketInfo, internalOpaque, e);
            urllibResponse.rt = performanceTime(requestStartTime);
            debug('Request#%d throw error: %s', requestId, e);
            channels.fetchResponse.publish({
                fetch: fetchMeta,
                error: e,
                fetchOpaque: internalOpaque,
            });
            channels.response.publish({
                request: reqMeta,
                response: urllibResponse,
                error: e,
                isSentByFetch: true,
                fetchOpaque: internalOpaque,
            });
            throw e;
        }
        // get undici internal response
        const state = getResponseState(res);
        updateSocketInfo(socketInfo, internalOpaque);
        urllibResponse.headers = convertHeader(res.headers);
        urllibResponse.status = urllibResponse.statusCode = res.status;
        urllibResponse.statusMessage = res.statusText;
        if (urllibResponse.headers['content-length']) {
            urllibResponse.size = parseInt(urllibResponse.headers['content-length']);
        }
        urllibResponse.rt = performanceTime(requestStartTime);
        debug('Request#%d got response, status: %s, headers: %j, timing: %j, socket: %j', requestId, urllibResponse.status, urllibResponse.headers, timing, urllibResponse.socket);
        channels.fetchResponse.publish({
            fetch: fetchMeta,
            timingInfo: state.timingInfo,
            response: res,
            fetchOpaque: internalOpaque,
        });
        channels.response.publish({
            request: reqMeta,
            response: urllibResponse,
            isSentByFetch: true,
            fetchOpaque: internalOpaque,
        });
        return res;
    }
    static getDispatcher() {
        return FetchFactory.#instance.getDispatcher();
    }
    static setDispatcher(dispatcher) {
        FetchFactory.#instance.setDispatcher(dispatcher);
    }
    static async fetch(input, init) {
        return FetchFactory.#instance.fetch(input, init);
    }
}
export const fetch = FetchFactory.fetch;
//# sourceMappingURL=data:application/json;base64,