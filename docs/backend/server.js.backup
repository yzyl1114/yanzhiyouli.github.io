const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3001;

// 中间件
app.use(cors({
  origin: ['https://goalcountdown.com', 'http://localhost:3000'],
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// 微信配置
const WECHAT_APPID = 'wxd4e5f7a42fa74524';
const WECHAT_SECRET = '8451317c0adeb0622fddae241c50e859';

// 用户存储（内存中）
let userStore = new Map();

// 简化的微信登录逻辑 - 完全不依赖 Supabase
async function handleWechatLogin(code) {
  console.log('开始处理微信登录，code:', code);
  
  try {
    // 1. 用 code 换取微信 access_token
    const tokenUrl = `https://api.weixin.qq.com/sns/oauth2/access_token?appid=${WECHAT_APPID}&secret=${WECHAT_SECRET}&code=${code}&grant_type=authorization_code`;
    console.log('请求微信token URL:', tokenUrl);
    
    const tokenResponse = await fetch(tokenUrl);
    const tokenData = await tokenResponse.json();
    console.log('微信token响应:', tokenData);
    
    if (tokenData.errcode) {
      console.error('微信token获取失败:', tokenData);
      throw new Error(`微信登录失败: ${tokenData.errmsg} (错误码: ${tokenData.errcode})`);
    }

    const { access_token, openid } = tokenData;
    console.log('获取到微信openid:', openid);

    // 2. 获取微信用户信息
    const userInfoUrl = `https://api.weixin.qq.com/sns/userinfo?access_token=${access_token}&openid=${openid}&lang=zh_CN`;
    const userInfoResponse = await fetch(userInfoUrl);
    const userInfo = await userInfoResponse.json();
    console.log('微信用户信息:', userInfo);

    if (userInfo.errcode) {
      console.error('获取用户信息失败:', userInfo);
      throw new Error(`获取用户信息失败: ${userInfo.errmsg}`);
    }

    // 3. 生成用户ID（基于openid）
    const userId = 'user_' + openid.substr(0, 8);
    
    // 4. 存储用户信息（内存中）
    const userData = {
      id: userId,
      openid: openid,
      nickname: userInfo.nickname,
      avatar: userInfo.headimgurl,
      created_at: new Date().toISOString(),
      is_member: false,
      member_plan: null
    };
    
    userStore.set(openid, userData);
    console.log('用户信息已存储:', userData);

    console.log('✅ 微信登录处理完成');

    return {
      success: true,
      user_id: userId,
      user_info: {
        id: userId,
        nickname: userInfo.nickname,
        avatar: userInfo.headimgurl,
        openid: openid,
        is_member: false,
        member_plan: null,
        username: userInfo.nickname,
        avatar_url: userInfo.headimgurl
      }
    };

  } catch (error) {
    console.error('❌ 微信登录处理异常:', error);
    throw error;
  }
}

// GET 方式的微信登录接口
app.get('/api/wechat-login', async (req, res) => {
  console.log('=== GET方式微信登录请求 ===');
  console.log('请求方法:', req.method);
  console.log('查询参数:', req.query);
  
  const { code } = req.query;
  
  if (!code) {
    console.log('❌ GET方式错误: code 参数为空');
    return res.status(400).json({ error: '微信授权码不能为空' });
  }

  console.log('✅ GET方式收到微信授权码:', code);
  
  try {
    const result = await handleWechatLogin(code);
    res.json(result);
  } catch (error) {
    console.error('❌ 微信登录失败:', error);
    res.status(500).json({ 
      error: error.message,
      details: '登录处理失败，请稍后重试'
    });
  }
});

// 获取用户信息接口
app.get('/api/user-info', (req, res) => {
  const { openid } = req.query;
  
  if (!openid) {
    return res.status(400).json({ error: 'openid 不能为空' });
  }
  
  const userData = userStore.get(openid);
  if (userData) {
    res.json({ success: true, user: userData });
  } else {
    res.status(404).json({ error: '用户不存在' });
  }
});

// 健康检查
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    user_count: userStore.size
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`✅ 微信登录后端运行在端口 ${PORT}`);
  console.log('✅ 当前使用完全离线模式');
  console.log('✅ 不依赖 Supabase，使用独立用户存储');
});
