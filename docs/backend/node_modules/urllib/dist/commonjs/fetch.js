"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetch = exports.FetchFactory = void 0;
const node_async_hooks_1 = require("node:async_hooks");
const node_util_1 = require("node:util");
const undici_1 = require("undici");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const symbols_js_1 = __importDefault(require("undici/lib/core/symbols.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const response_js_1 = require("undici/lib/web/fetch/response.js");
const HttpClient_js_1 = require("./HttpClient.js");
const HttpAgent_js_1 = require("./HttpAgent.js");
const diagnosticsChannel_js_1 = require("./diagnosticsChannel.js");
const utils_js_1 = require("./utils.js");
const symbols_js_2 = __importDefault(require("./symbols.js"));
const BaseAgent_js_1 = require("./BaseAgent.js");
const debug = (0, node_util_1.debuglog)('urllib/fetch');
class FetchFactory {
    #dispatcher;
    #opaqueLocalStorage = new node_async_hooks_1.AsyncLocalStorage();
    static #instance = new FetchFactory();
    setClientOptions(clientOptions) {
        let dispatcherOption = {
            opaqueLocalStorage: this.#opaqueLocalStorage,
        };
        let dispatcherClazz = BaseAgent_js_1.BaseAgent;
        if (clientOptions?.lookup || clientOptions?.checkAddress) {
            dispatcherOption = {
                ...dispatcherOption,
                lookup: clientOptions.lookup,
                checkAddress: clientOptions.checkAddress,
                connect: clientOptions.connect,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = HttpAgent_js_1.HttpAgent;
        }
        else if (clientOptions?.connect) {
            dispatcherOption = {
                ...dispatcherOption,
                connect: clientOptions.connect,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = BaseAgent_js_1.BaseAgent;
        }
        else if (clientOptions?.allowH2) {
            // Support HTTP2
            dispatcherOption = {
                ...dispatcherOption,
                allowH2: clientOptions.allowH2,
            };
            dispatcherClazz = BaseAgent_js_1.BaseAgent;
        }
        this.#dispatcher = new dispatcherClazz(dispatcherOption);
        (0, diagnosticsChannel_js_1.initDiagnosticsChannel)();
    }
    getDispatcher() {
        return this.#dispatcher ?? (0, undici_1.getGlobalDispatcher)();
    }
    setDispatcher(dispatcher) {
        this.#dispatcher = dispatcher;
    }
    getDispatcherPoolStats() {
        const agent = this.getDispatcher();
        // origin => Pool Instance
        const clients = Reflect.get(agent, symbols_js_1.default.kClients);
        const poolStatsMap = {};
        if (!clients) {
            return poolStatsMap;
        }
        for (const [key, ref] of clients) {
            const pool = (typeof ref.deref === 'function' ? ref.deref() : ref);
            // NOTE: pool become to { dispatcher: Pool } in undici@v7
            const stats = pool?.stats ?? pool?.dispatcher?.stats;
            if (!stats)
                continue;
            poolStatsMap[key] = {
                connected: stats.connected,
                free: stats.free,
                pending: stats.pending,
                queued: stats.queued,
                running: stats.running,
                size: stats.size,
            };
        }
        return poolStatsMap;
    }
    static setClientOptions(clientOptions) {
        FetchFactory.#instance.setClientOptions(clientOptions);
    }
    static getDispatcherPoolStats() {
        return FetchFactory.#instance.getDispatcherPoolStats();
    }
    async fetch(input, init) {
        const requestStartTime = performance.now();
        init = init ?? {};
        init.dispatcher = init.dispatcher ?? this.#dispatcher;
        const request = new undici_1.Request(input, init);
        const requestId = (0, utils_js_1.globalId)('HttpClientRequest');
        // https://developer.chrome.com/docs/devtools/network/reference/?utm_source=devtools#timing-explanation
        const timing = {
            // socket assigned
            queuing: 0,
            // dns lookup time
            dnslookup: 0,
            // socket connected
            connected: 0,
            // request headers sent
            requestHeadersSent: 0,
            // request sent, including headers and body
            requestSent: 0,
            // Time to first byte (TTFB), the response headers have been received
            waiting: 0,
            // the response body and trailers have been received
            contentDownload: 0,
        };
        // using opaque to diagnostics channel, binding request and socket
        const internalOpaque = {
            [symbols_js_2.default.kRequestId]: requestId,
            [symbols_js_2.default.kRequestStartTime]: requestStartTime,
            [symbols_js_2.default.kEnableRequestTiming]: !!(init.timing ?? true),
            [symbols_js_2.default.kRequestTiming]: timing,
            // [symbols.kRequestOriginalOpaque]: originalOpaque,
        };
        const reqMeta = {
            requestId,
            url: request.url,
            args: {
                method: request.method,
                type: request.method,
                data: request.body,
                headers: (0, utils_js_1.convertHeader)(request.headers),
            },
            retries: 0,
        };
        const fetchMeta = {
            requestId,
            request,
        };
        const socketInfo = {
            id: 0,
            localAddress: '',
            localPort: 0,
            remoteAddress: '',
            remotePort: 0,
            remoteFamily: '',
            bytesWritten: 0,
            bytesRead: 0,
            handledRequests: 0,
            handledResponses: 0,
        };
        HttpClient_js_1.channels.request.publish({
            request: reqMeta,
            isSentByFetch: true,
            fetchOpaque: internalOpaque,
        });
        HttpClient_js_1.channels.fetchRequest.publish({
            fetch: fetchMeta,
            fetchOpaque: internalOpaque,
        });
        let res;
        // keep urllib createCallbackResponse style
        const resHeaders = {};
        const urllibResponse = {
            status: -1,
            statusCode: -1,
            statusText: '',
            statusMessage: '',
            headers: resHeaders,
            size: 0,
            aborted: false,
            rt: 0,
            keepAliveSocket: true,
            requestUrls: [
                request.url,
            ],
            timing,
            socket: socketInfo,
            retries: 0,
            socketErrorRetries: 0,
        };
        try {
            await this.#opaqueLocalStorage.run(internalOpaque, async () => {
                res = await (0, undici_1.fetch)(request);
            });
        }
        catch (e) {
            (0, utils_js_1.updateSocketInfo)(socketInfo, internalOpaque, e);
            urllibResponse.rt = (0, utils_js_1.performanceTime)(requestStartTime);
            debug('Request#%d throw error: %s', requestId, e);
            HttpClient_js_1.channels.fetchResponse.publish({
                fetch: fetchMeta,
                error: e,
                fetchOpaque: internalOpaque,
            });
            HttpClient_js_1.channels.response.publish({
                request: reqMeta,
                response: urllibResponse,
                error: e,
                isSentByFetch: true,
                fetchOpaque: internalOpaque,
            });
            throw e;
        }
        // get undici internal response
        const state = (0, response_js_1.getResponseState)(res);
        (0, utils_js_1.updateSocketInfo)(socketInfo, internalOpaque);
        urllibResponse.headers = (0, utils_js_1.convertHeader)(res.headers);
        urllibResponse.status = urllibResponse.statusCode = res.status;
        urllibResponse.statusMessage = res.statusText;
        if (urllibResponse.headers['content-length']) {
            urllibResponse.size = parseInt(urllibResponse.headers['content-length']);
        }
        urllibResponse.rt = (0, utils_js_1.performanceTime)(requestStartTime);
        debug('Request#%d got response, status: %s, headers: %j, timing: %j, socket: %j', requestId, urllibResponse.status, urllibResponse.headers, timing, urllibResponse.socket);
        HttpClient_js_1.channels.fetchResponse.publish({
            fetch: fetchMeta,
            timingInfo: state.timingInfo,
            response: res,
            fetchOpaque: internalOpaque,
        });
        HttpClient_js_1.channels.response.publish({
            request: reqMeta,
            response: urllibResponse,
            isSentByFetch: true,
            fetchOpaque: internalOpaque,
        });
        return res;
    }
    static getDispatcher() {
        return FetchFactory.#instance.getDispatcher();
    }
    static setDispatcher(dispatcher) {
        FetchFactory.#instance.setDispatcher(dispatcher);
    }
    static async fetch(input, init) {
        return FetchFactory.#instance.fetch(input, init);
    }
}
exports.FetchFactory = FetchFactory;
exports.fetch = FetchFactory.fetch;
//# sourceMappingURL=data:application/json;base64,