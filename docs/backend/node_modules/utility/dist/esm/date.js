import { LRU } from 'ylru';
const lru = new LRU(1000); // Cache up to 1000 entries
export function resetTimezone(date) {
    let TIMEZONE = '';
    const offsetInMinutes = date.getTimezoneOffset();
    const _hourOffset = Math.floor(-offsetInMinutes / 60);
    const _minuteOffset = Math.abs(offsetInMinutes % 60);
    TIMEZONE += _hourOffset >= 0 ? '+' : '-';
    TIMEZONE += `${String(Math.abs(_hourOffset)).padStart(2, '0')}${String(_minuteOffset).padStart(2, '0')}`;
    return TIMEZONE;
}
const MONTHS = {
    '01': 'Jan',
    '02': 'Feb',
    '03': 'Mar',
    '04': 'Apr',
    '05': 'May',
    '06': 'Jun',
    '07': 'Jul',
    '08': 'Aug',
    '09': 'Sep',
    // eslint-disable-next-line quote-props
    '10': 'Oct',
    // eslint-disable-next-line quote-props
    '11': 'Nov',
    // eslint-disable-next-line quote-props
    '12': 'Dec',
};
/**
 * return `[ YYYY, MM, DD, HH, mm, ss ]` date string array
 */
export function getDateStringParts(d, onlyDate) {
    d = d || new Date();
    const monthNum = d.getMonth() + 1;
    const month = monthNum < 10 ? `0${monthNum}` : `${monthNum}`;
    const dateNum = d.getDate();
    const date = dateNum < 10 ? `0${dateNum}` : `${dateNum}`;
    if (onlyDate) {
        return [`${d.getFullYear()}`, month, date];
    }
    const hoursNum = d.getHours();
    const hours = hoursNum < 10 ? `0${hoursNum}` : `${hoursNum}`;
    const minutesNum = d.getMinutes();
    const minutes = minutesNum < 10 ? `0${minutesNum}` : `${minutesNum}`;
    const secondsNum = d.getSeconds();
    const seconds = secondsNum < 10 ? `0${secondsNum}` : `${secondsNum}`;
    return [`${d.getFullYear()}`, month, date, hours, minutes, seconds];
}
/**
 * Access log format date. format: `moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')`
 */
export function accessLogDate(d) {
    // 16/Apr/2013:16:40:09 +0800
    d = d || new Date();
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    const TIMEZONE = getTimezone(d);
    return `${date}/${MONTHS[month]}/${year}:${hours}:${minutes}:${seconds} ${TIMEZONE}`;
}
export function getTimezone(d) {
    const key = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate();
    const timeZone = lru.get(key);
    if (timeZone === undefined) {
        lru.set(key, resetTimezone(d), { maxAge: 86400000 }); // Cache for 24 hours
        return lru.get(key);
    }
    return timeZone;
}
export function logDate(d, msSep) {
    if (typeof d === 'string') {
        // logDate(msSep)
        msSep = d;
        d = new Date();
    }
    else {
        // logDate(d, msSep)
        d = d || new Date();
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    const millisecondsNum = d.getMilliseconds();
    let milliseconds = `${millisecondsNum}`;
    if (millisecondsNum < 10) {
        milliseconds = `00${millisecondsNum}`;
    }
    else if (millisecondsNum < 100) {
        milliseconds = `0${millisecondsNum}`;
    }
    msSep = msSep || '.';
    return `${year}-${month}-${date} ${hours}:${minutes}:${seconds}${msSep}${milliseconds}`;
}
export const YYYYMMDDHHmmssSSS = logDate;
/**
 * `moment().format('YYYY-MM-DD HH:mm:ss')` format date string.
 */
export function YYYYMMDDHHmmss(d, options) {
    d = d || new Date();
    if (!(d instanceof Date)) {
        d = new Date(d);
    }
    let dateSep = '-';
    let timeSep = ':';
    if (options?.dateSep) {
        dateSep = options.dateSep;
    }
    if (options?.timeSep) {
        timeSep = options.timeSep;
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    return `${year}${dateSep}${month}${dateSep}${date} ${hours}${timeSep}${minutes}${timeSep}${seconds}`;
}
/**
 * `moment().format('YYYY-MM-DD')` format date string.
 */
export function YYYYMMDD(d, sep) {
    if (typeof d === 'string') {
        // YYYYMMDD(sep)
        sep = d;
        d = new Date();
    }
    else {
        // YYYYMMDD(d, sep)
        d = d || new Date();
        if (typeof sep !== 'string') {
            sep = '-';
        }
    }
    const [year, month, date] = getDateStringParts(d, true);
    return `${year}${sep}${month}${sep}${date}`;
}
/**
 * return datetime struct.
 *
 * @return {Object} date
 *  - {Number} YYYYMMDD, 20130401
 *  - {Number} H, 0, 1, 9, 12, 23
 */
export function datestruct(now) {
    now = now || new Date();
    return {
        YYYYMMDD: now.getFullYear() * 10000 + (now.getMonth() + 1) * 100 + now.getDate(),
        H: now.getHours(),
    };
}
/**
 * Get Unix's timestamp in seconds.
 */
export function timestamp(t) {
    if (t) {
        // convert timestamp to Date
        // timestamp(timestampValue)
        let v;
        if (typeof t === 'string') {
            v = Number(t);
        }
        else {
            v = t;
        }
        if (String(v).length === 10) {
            v *= 1000;
        }
        return new Date(v);
    }
    // get current timestamp
    return Math.round(Date.now() / 1000);
}
/**
 * Parse timestamp to Date
 */
export function parseTimestamp(t) {
    return timestamp(t);
}
/**
 * Convert Date object to Unix timestamp in seconds.
 */
export function dateToUnixTimestamp(date) {
    return Math.round(date.getTime() / 1000);
}
export var DateFormat;
(function (DateFormat) {
    DateFormat["DateTimeWithTimeZone"] = "DateTimeWithTimeZone";
    DateFormat["DateTimeWithMilliSeconds"] = "DateTimeWithMilliSeconds";
    DateFormat["DateTimeWithSeconds"] = "DateTimeWithSeconds";
    DateFormat["UnixTimestamp"] = "UnixTimestamp";
})(DateFormat || (DateFormat = {}));
/**
 * Provide milliseconds, return a formatted string.
 */
export function getDateFromMilliseconds(milliseconds, format) {
    if (!Number.isFinite(milliseconds)) {
        throw new Error('Invalid milliseconds value');
    }
    switch (format) {
        case DateFormat.DateTimeWithTimeZone:
            return accessLogDate(new Date(milliseconds));
        case DateFormat.DateTimeWithMilliSeconds:
            return logDate(new Date(milliseconds));
        case DateFormat.DateTimeWithSeconds:
            return YYYYMMDDHHmmss(new Date(milliseconds));
        case DateFormat.UnixTimestamp:
            return dateToUnixTimestamp(new Date(milliseconds)).toString();
        default:
            return YYYYMMDD(new Date(milliseconds));
    }
}
//# sourceMappingURL=data:application/json;base64,